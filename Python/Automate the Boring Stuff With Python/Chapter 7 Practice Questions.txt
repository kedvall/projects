1.	The re.compile() from the re module
2.	\ are often used. raw strings don't count them as escape characters
3.	A match object
4.	.group()
5.	Group 0 is the entire match, group 1 is the first three numbers, group 2 remaining numbers xxx-xxxx
6.	\(\)\.
7.	If regex has NO groups, list of stings is returned, more than one group returns list of tuples of strings
8.	| Signifies OR
9.	? Means either match ZERO or ONE, or perform a nongreedy search
10.	+ means ONE or more, * means ZERO of more
11.	{3} means 3 repetitions, {3,5} means 3, 4, or 5 repetitions
12.	\d is any digit character, \w is any "word" character (a-z, A-Z, 1-9, underscore), \s is a space character
13. \D means any digit character EXCEPT a digit character, \W means any char EXEPT a "word" character, \S is any character EXCEPT a space character
14.	Passing re.I makes searches case insensitive
15.	. normally matches anything except a \n (newline). If .DOTALL is passed, it also matches newlines
16.	.* is greedy (will match most number of characters possible), .*? is nongreedy, will match as few characters as possible
17.	[0-9a-z], [a-z0-9]
18.	X drummers, X pipers, five rings, X hens
19.	It lets you use multiline strings to better comment and organize Regexs
20.	re.compile(r'''
	^\d{1,3}(,\d{3})*$
	''', re.VERBOSE)
21.	re.compile(r'''
	[A-Z]([a-z])*\s^(Nakamoto)$
	''', re.VERBOSE)
22.	re.compile(r'''
	(Alice|Bob|Carol)\s(eats|pets|throws)\s(|apples|cats|baseballs)\.
	''', re.VERBOSE|re.I)